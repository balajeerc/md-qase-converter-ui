// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sDj2ruLAFhmZZDvF4NRj4P
// Component: YuNIUFK68v
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_md_qase_convert.module.css"; // plasmic-import: sDj2ruLAFhmZZDvF4NRj4P/projectcss
import * as sty from "./PlasmicHomepage.module.css"; // plasmic-import: YuNIUFK68v/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: QbZN-31JvC/icon

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  appIcon?: p.Flex<"svg">;
  converterHeader?: p.Flex<"div">;
  suiteHeaderLabel?: p.Flex<"div">;
  suiteHeaderInput?: p.Flex<"input">;
  markdownInputTextArea?: p.Flex<"textarea">;
  qaseOutputTextArea?: p.Flex<"textarea">;
  downloadQaseJson?: p.Flex<"button">;
};

export interface DefaultHomepageProps {
  dataFetches: PlasmicHomepage__Fetches;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  dataFetches?: PlasmicHomepage__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div className={classNames(defaultcss.all, sty.freeBox___5YWv)}>
            <IconIcon
              data-plasmic-name={"appIcon"}
              data-plasmic-override={overrides.appIcon}
              className={classNames(defaultcss.all, sty.appIcon)}
              role={"img"}
            />

            <div
              data-plasmic-name={"converterHeader"}
              data-plasmic-override={overrides.converterHeader}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.converterHeader
              )}
            >
              <span className={"plasmic_default__all plasmic_default__span"}>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Converter"}
                </span>
              </span>
            </div>
          </div>

          <div className={classNames(defaultcss.all, sty.freeBox___4HM)}>
            <div
              data-plasmic-name={"suiteHeaderLabel"}
              data-plasmic-override={overrides.suiteHeaderLabel}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.suiteHeaderLabel
              )}
            >
              {"Suite Header"}
            </div>

            <input
              data-plasmic-name={"suiteHeaderInput"}
              data-plasmic-override={overrides.suiteHeaderInput}
              className={classNames(defaultcss.input, sty.suiteHeaderInput)}
              placeholder={"Header suite name" as const}
              size={1 as const}
              type={"text" as const}
              value={"My test cases" as const}
            />
          </div>

          <div className={classNames(defaultcss.all, sty.freeBox__kv7Nu)}>
            <textarea
              data-plasmic-name={"markdownInputTextArea"}
              data-plasmic-override={overrides.markdownInputTextArea}
              className={classNames(
                defaultcss.textarea,
                sty.markdownInputTextArea
              )}
              placeholder={"Enter Markdown Testcases Here" as const}
              value={"" as const}
            />

            <textarea
              data-plasmic-name={"qaseOutputTextArea"}
              data-plasmic-override={overrides.qaseOutputTextArea}
              className={classNames(
                defaultcss.textarea,
                sty.qaseOutputTextArea
              )}
              disabled={true}
              placeholder={"Qase JSON Appears Here" as const}
              value={"" as const}
            />
          </div>

          <div className={classNames(defaultcss.all, sty.freeBox__lEw5)}>
            <button
              data-plasmic-name={"downloadQaseJson"}
              data-plasmic-override={overrides.downloadQaseJson}
              className={classNames(
                defaultcss.button,
                defaultcss.__wab_text,
                sty.downloadQaseJson
              )}
            >
              {"Download Qase JSON\n"}
            </button>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "appIcon",
    "converterHeader",
    "suiteHeaderLabel",
    "suiteHeaderInput",
    "markdownInputTextArea",
    "qaseOutputTextArea",
    "downloadQaseJson"
  ],
  appIcon: ["appIcon"],
  converterHeader: ["converterHeader"],
  suiteHeaderLabel: ["suiteHeaderLabel"],
  suiteHeaderInput: ["suiteHeaderInput"],
  markdownInputTextArea: ["markdownInputTextArea"],
  qaseOutputTextArea: ["qaseOutputTextArea"],
  downloadQaseJson: ["downloadQaseJson"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  appIcon: "svg";
  converterHeader: "div";
  suiteHeaderLabel: "div";
  suiteHeaderInput: "input";
  markdownInputTextArea: "textarea";
  qaseOutputTextArea: "textarea";
  downloadQaseJson: "button";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicHomepage__Fetches;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    appIcon: makeNodeComponent("appIcon"),
    converterHeader: makeNodeComponent("converterHeader"),
    suiteHeaderLabel: makeNodeComponent("suiteHeaderLabel"),
    suiteHeaderInput: makeNodeComponent("suiteHeaderInput"),
    markdownInputTextArea: makeNodeComponent("markdownInputTextArea"),
    qaseOutputTextArea: makeNodeComponent("qaseOutputTextArea"),
    downloadQaseJson: makeNodeComponent("downloadQaseJson"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
